name: Build and Push Docker Image for Specific Applications

on:
  pull_request:
    branches:
      - main
    paths:
      - 'gateway/**'
      - 'pagamentos/**'
  push:
    branches:
      - main
    paths:
      - 'gateway/**'
      - 'pagamentos/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_gateway:
    environment: OCI_Secrets
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'gateway')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Generate version for gateway
        id: version_gateway
        run: |
          if [ ! -f gateway/VERSION ]; then
            echo "1" > gateway/VERSION
          fi

          VERSION=$(cat gateway/VERSION)
          NEW_VERSION=$((VERSION + 1))
          echo $NEW_VERSION > gateway/VERSION
          echo "VERSION=v${NEW_VERSION}" >> $GITHUB_ENV

      - name: Build and push Docker image for gateway
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/gateway:${{ env.VERSION }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/gateway:latest \
            --push gateway/

      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      - name: Scan Docker image for vulnerabilities using Snyk
        run: |
          snyk container test ${{ secrets.DOCKER_HUB_USERNAME }}/gateway:${{ env.VERSION }} || true

  build_pagamentos:
    environment: OCI_Secrets
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'pagamentos')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Generate version for pagamentos
        id: version_pagamentos
        run: |
          if [ ! -f pagamentos/VERSION ]; then
            echo "1" > pagamentos/VERSION
          fi

          VERSION=$(cat pagamentos/VERSION)
          NEW_VERSION=$((VERSION + 1))
          echo $NEW_VERSION > pagamentos/VERSION
          echo "VERSION=v${NEW_VERSION}" >> $GITHUB_ENV

      - name: Build and push Docker image for pagamentos
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/pagamentos:${{ env.VERSION }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/pagamentos:latest \
            --push pagamentos/

      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      - name: Scan Docker image for vulnerabilities using Snyk
        run: |
          snyk container test ${{ secrets.DOCKER_HUB_USERNAME }}/pagamentos:${{ env.VERSION }} || true

  install-kubectl:
    environment: OCI_Secrets
    runs-on: ubuntu-latest
    name: Install Kubectl for OKE
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: "${{ vars.OCI_CLI_REGION }}"

    steps:
      - name: Configure Kubectl
        uses: oracle-actions/configure-kubectl-oke@v1.5.0
        id: test-configure-kubectl-oke-action
        with:
          cluster: ${{ secrets.OKE_CLUSTER_OCID }}

      - name: Run Kubectl
        run: kubectl get nodes -A
