name: Build and Push Docker Image for Pagamentos Application

on:
  pull_request:
    branches:
      - main
    paths:
      - 'pagamentos/**'
  push:
    branches:
      - main
    paths:
      - 'pagamentos/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    environment: OCI_Secrets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Get current version
        id: get_version
        run: |
          # Se o arquivo VERSION não existir, cria com a versão inicial
          if [ ! -f pagamentos/VERSION ]; then
            echo "1" > pagamentos/VERSION
          fi
          # Lê a versão atual e incrementa
          VERSION=$(cat pagamentos/VERSION)
          NEW_VERSION=$((VERSION + 1))
          echo "$NEW_VERSION" > pagamentos/VERSION
          echo "VERSION=v${NEW_VERSION}" >> $GITHUB_ENV

      - name: Commit new version
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add pagamentos/VERSION
          git commit -m "Bump version to v${{ env.VERSION }}" || echo "No changes to commit"
          git push origin main --force

      - name: Build and push Docker image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/pagamentos:${{ env.VERSION }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/pagamentos:latest \
            --push pagamentos/

      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      - name: Scan Docker image for vulnerabilities using Snyk
        run: |
          snyk container test ${{ secrets.DOCKER_HUB_USERNAME }}/pagamentos:${{ env.VERSION }} || true

  install-kubectl:
    environment: OCI_Secrets
    runs-on: ubuntu-latest
    name: Install Kubectl for OKE
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      
